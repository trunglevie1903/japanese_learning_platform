1.
  cd backend
2.
  npm init -y
3.
  npm i express dotenv envalid
4.
  npm i -D typescript @types/node @types/express ts-node tsc-watch tsc

5. edit package.json
"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "start": "node dist/index.js",
  "dev": "tsc-watch --onSuccess \"node ./dist/index.js\"",
  "build": "tsc",
  "postinstall": "npm run build"
},
"_moduleAliases": {
  "@/*": "dist/*"
}

change the * to the folder right after folder src, like src/routes -> @/routes: dist/routes, etc...

6.
  tsc.cmd --init
7. edit tsconfig.json
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "outDir": "dist",                        /* Redirect output structure to the directory. */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */

    /* Additional Checks */

    /* Module Resolution Options */
    "baseUrl": "./src",                       /* Base directory to resolve non-absolute module names. */
    "paths": {
      "@/middlewares/*" : ["middlewares/*"],
    },                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  }
}

in the "paths" attribute, with every subfolder of src must have one record for it, like
"@/a/*" : ["a/*"],
"@/b/*" : ["b/*"],
"@/c/*" : ["c/*"],
etc...

8. src/utils/HttpException.ts
class HttpException extends Error {
  public status: number;
  public message: string;

  constructor(status: number, message: string) {
      super(message);
      this.status = status;
      this.message = message;
  }
}

export default HttpException;

9. src/middlewares/error.ts
import { Request, Response, NextFunction } from 'express';
import HttpException from '@/utils/HttpException';

function errorMiddleware(
    error: HttpException,
    req: Request,
    res: Response,
    _next: NextFunction
): void {
    const status = error.status || 500;
    const message = error.message || 'Something went wrong';
    res.status(status).send({
        status,
        message,
    });
}

export default errorMiddleware;

10.src/utils/Interface.Controller.ts

import { Router } from 'express';

interface Interface_Controller {
    path: string;
    router: Router;
}

export default Interface_Controller;

11. src/routes/Dummy.ts
import { Router, Request, Response, NextFunction } from "express";

import Interface_Controller from "@/utils/Interface.Controller";
import HttpException from "@/utils/HttpException";

class DummyController implements Interface_Controller {
  public path = "/";
  public router = Router();

  constructor() {
    this.initializeRoutes();
  }

  private initializeRoutes(): void {
    this.router.get(
      `${this.path}`,
      this.get
    )
  };

  private get = (
    req: Request, res: Response, next: NextFunction
  ): void => {
    res.status(200).json({
      message: "OK!"
    });
  };
}

export default DummyController;

12. src/app.tsc
import express, { Application } from 'express';
import cors from 'cors';
import Controller from '@/utils/Interface.Controller';
import ErrorMiddleware from '@/middlewares/error';
import DummyController from './routes/Dummy';

class App {
  public express: Application;
  public port: number;

  constructor(controllers: Controller[], port: number) {
    this.express = express();
    this.port = port;

    this.initializeDatabaseConnection();
    this.initializeMiddleware();
    this.initializeControllers(controllers);
    this.initializeErrorHandling();
  }

  private initializeMiddleware(): void {
    this.express.use(cors());
    this.express.use(express.json());
    this.express.use(express.urlencoded({ extended: false }));
  }

  private initializeControllers(controllers: Controller[]): void {
    controllers.forEach((controller: Controller) => {
      this.express.use('/', controller.router);
    });
    this.express.use('/test/', new DummyController().router);
  }

  private initializeErrorHandling(): void {
    this.express.use(ErrorMiddleware);
  }

  private initializeDatabaseConnection(): void {
  }

  public listen(): void {
    this.express.listen(this.port, () => {
      console.log(`App listening on the port ${this.port}`);
    });
  }
}

export default App;

13. src/index.ts
import 'dotenv/config';
import 'module-alias/register';

import App from './app';

const app = new App(
  [],
  3000
);
app.listen();

14. npm run dev
- go to localhost:3000/test, if the page response with message: "OK!", the code run successfully!

15. cd frontend
npx create-react-app . --template typescript

16. edit package.json
...,
"proxy": "http://localhost:3000"

the value should be the url to backend server.